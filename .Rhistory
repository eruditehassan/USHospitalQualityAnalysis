source("read_hospital_data")
source("read_hospital_data.R")
source("morality_rate.R")
source("morality_rate.R")
outcome <- readHospitalData("outcome-of-care-measures.csv")
moralityRate(outcome)
source("morality_rate.R")
moralityRate(outcome)
moralityRate(outcome)
head(outcome[.7])
head(outcome[,7])
head(outcome[,11])
hist(outcome[,11])
hist(as.numeric(outcome[,11]))
moralityRate(outcome)
## 11,17,23
reqO <- outcome[,c(11,17,23)]
names(reqO)
reqO <- complete.cases(reqO)
str(reqO)
out <- outcome[reqO]
out <- outcome[reqO,]
tail(out[,11],15)
outcome <- read.csv("outcome-of-care-measures.csv")
tail(outcome[,11],15)
out
out[,11] <- as.numeric(out[,11])
out[,17] <- as.numeric(out[,17])
out[,23] <- as.numeric(out[,23])
reqO <- out[,c(11,17,23)]
reqO <- complete.cases(reqO)
out <- out[reqO]
out <- out[reqO,]
req1 <- outcome[reqO]
req1 <- out[reqO,]
req1 <- req1[,c(11,17,23)]
req <- data.frame(out[,7],rowMeans(req1))
head(req,15)
sort(req)
?sort
sort(req,order(req[,2]))
sort(req,order(req[,2],decreasing=decreasing))
sort(req,order(req[,2],decreasing=req[,2]))
sorted <- req[order(-2)]
head(sorted)
head(req)
names(req)
names(req) <- c("State","mor_rate")
head(req)
sorted <- req[order(c(-mor_rate,state))]
sorted <- req[order(c(-req$mor_rate,req$state))]
sorted <- req[order(c(-req$mor_rate,req$state),)]
sorted <- req[order(c(-req$mor_rate,req$state)),]
head(sorted)
sorted <- req[order(c(req$mor_rate,req$state)),]
head(sorted)
head(sorted[sorted$state=='KY'])
sorted[sorted$state=='KY']
head(sorted$stae == "KY")
head(sorted$stae == "KY")
which(sorted$stae == "KY")
which(sorted$stae == "NY")
head(sorted)
class(sorted)
?grep
mapply(grep,"KY",sorted)
ex <- sorted[req <- data.frame(out[,7],rowMeans(out[,11],),]
ex <- sorted[mapply(grep,"KY",sorted),]
ex <- sorted[as.numeric(mapply(grep,"KY",sorted)),]
res <- mapply(grep,"KY",sorted)
res <- res$'KY'
head(res)
class(res)
ex <- sorted[res,]
ex
res[1]
ex[1]
ex[1,]
outcome <- readHospitalData("outcome-of-care-measures.csv")
out <- outcome[,c(2,7,11,17,23)]
out <- out[complete.cases(out),]
out[,11] <- as.numeric(out[,11])
str(out)
names(out)
out[,3] <- as.numeric(out[,3])
out[,4] <- as.numeric(out[,4])
out[,5] <- as.numeric(out[,5])
out <- out[complete.cases(out)]
out <- out[complete.cases(out),]
names(out)
names(out) <- c("Hospital","State","Cause")
names(out)
names(out) <- c("Hospital","State","heart attack","heart failure","pnuemonia")
haout <- out[order(out$`heart attack`,out$State,out$Hospital),]
head(haout)
req <- mapply(grep,"TX",haout)
head(req)
state <- "TX"
req <- req$state
req <- mapply(grep,"TX",haout)
req <- req[1]
class(req)
as.numeric(req)
req$"TX"
req
req <- mapply(grep,"TX",haout)
req
a <- mapply(grep,"TX",haout)
head(a)
a[2]
a <- mapply(grep,"TX",haout$State)
a
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
out <- outcome[,c(2,7,11,17,23)]
names(out)
names(out) <- c("hospital","state","heart attack","heart failure","pneumonia")
out[,3] <- as.numeric(out{,3})
out[,3] <- as.numeric(out[,3])
out[,4] <- as.numeric(out[,4])
out[,5] <- as.numeric(out[,5])
out <- out[complete.cases(out),]
outha <- out[order(out$`heart attack`,out$state)]
outha <- out[order(out$`heart attack`,out$state),]
head(outha)
s <- mapply(grep,"TX",outha)
head(s)
head(s[1])
unlist(s)
s <- mapply(grep,"TX",outha$state)
s
unlist(s)
s <- sapply(outha,grep, pattern = "TX")
s
s$state
s <- sapply(outha,grep, pattern = "NY")
s$state
class(s$state)
s <- sapply(outha$state,grep, pattern = "NY")
s
s <- sapply(outha,grep, pattern = "NY")
s$state
req <- outha[s$state,]
req
req[1]
req[1,]
s <- sapply(outha,grep, pattern = "TX")
req <- outha[s$state,]
req[1,]
req[1,][1]
req[1,][[1]]
source("best.R")
best("TX","heart attack")
best("TX","heart attack")
source("best.R")
best("TX","heart attack")
source("best.R")
best("TX","heart attack")
best("TX","heart attack")
source("best.R")
best("TX","heart attack")
best("TX","heart attack")
function (x, i, j, drop = if (missing(i)) TRUE else length(cols) ==
1)
{
mdrop <- missing(drop)
Narg <- nargs() - !mdrop
has.j <- !missing(j)
if (!all(names(sys.call()) %in% c("", "drop")) && !isS4(x))
warning("named arguments other than 'drop' are discouraged")
if (Narg < 3L) {
if (!mdrop)
warning("'drop' argument will be ignored")
if (missing(i))
return(x)
if (is.matrix(i))
return(as.matrix(x)[i])
nm <- names(x)
if (is.null(nm))
nm <- character()
if (!is.character(i) && anyNA(nm)) {
names(nm) <- names(x) <- seq_along(x)
y <- NextMethod("[")
cols <- names(y)
if (anyNA(cols))
stop("undefined columns selected")
cols <- names(y) <- nm[cols]
}
else {
y <- NextMethod("[")
cols <- names(y)
if (!is.null(cols) && anyNA(cols))
stop("undefined columns selected")
}
if (anyDuplicated(cols))
names(y) <- make.unique(cols)
attr(y, "row.names") <- .row_names_info(x, 0L)
attr(y, "class") <- oldClass(x)
return(y)
}
if (missing(i)) {
if (drop && !has.j && length(x) == 1L)
return(.subset2(x, 1L))
nm <- names(x)
if (is.null(nm))
nm <- character()
if (has.j && !is.character(j) && anyNA(nm)) {
names(nm) <- names(x) <- seq_along(x)
y <- .subset(x, j)
cols <- names(y)
if (anyNA(cols))
stop("undefined columns selected")
cols <- names(y) <- nm[cols]
}
else {
y <- if (has.j)
.subset(x, j)
else x
cols <- names(y)
if (anyNA(cols))
stop("undefined columns selected")
}
if (drop && length(y) == 1L)
return(.subset2(y, 1L))
if (anyDuplicated(cols))
names(y) <- make.unique(cols)
nrow <- .row_names_info(x, 2L)
if (drop && !mdrop && nrow == 1L)
return(structure(y, class = NULL, row.names = NULL))
else {
attr(y, "class") <- oldClass(x)
attr(y, "row.names") <- .row_names_info(x, 0L)
return(y)
}
}
xx <- x
cols <- names(xx)
x <- vector("list", length(x))
x <- .Internal(copyDFattr(xx, x))
oldClass(x) <- attr(x, "row.names") <- NULL
if (has.j) {
nm <- names(x)
if (is.null(nm))
nm <- character()
if (!is.character(j) && anyNA(nm))
names(nm) <- names(x) <- seq_along(x)
x <- x[j]
cols <- names(x)
if (drop && length(x) == 1L) {
if (is.character(i)) {
rows <- attr(xx, "row.names")
i <- pmatch(i, rows, duplicates.ok = TRUE)
}
xj <- .subset2(.subset(xx, j), 1L)
return(if (length(dim(xj)) != 2L) xj[i] else xj[i,
, drop = FALSE])
}
if (anyNA(cols))
stop("undefined columns selected")
if (!is.null(names(nm)))
cols <- names(x) <- nm[cols]
nxx <- structure(seq_along(xx), names = names(xx))
sxx <- match(nxx[j], seq_along(xx))
}
else sxx <- seq_along(x)
rows <- NULL
if (is.character(i)) {
rows <- attr(xx, "row.names")
i <- pmatch(i, rows, duplicates.ok = TRUE)
}
for (j in seq_along(x)) {
xj <- xx[[sxx[j]]]
x[[j]] <- if (length(dim(xj)) != 2L)
xj[i]
else xj[i, , drop = FALSE]
}
if (drop) {
n <- length(x)
if (n == 1L)
return(x[[1L]])
if (n > 1L) {
xj <- x[[1L]]
nrow <- if (length(dim(xj)) == 2L)
dim(xj)[1L]
else length(xj)
drop <- !mdrop && nrow == 1L
}
else drop <- FALSE
}
if (!drop) {
if (is.null(rows))
rows <- attr(xx, "row.names")
rows <- rows[i]
if ((ina <- anyNA(rows)) | (dup <- anyDuplicated(rows))) {
if (!dup && is.character(rows))
dup <- "NA" %in% rows
if (ina)
rows[is.na(rows)] <- "NA"
if (dup)
rows <- make.unique(as.character(rows))
}
if (has.j && anyDuplicated(nm <- names(x)))
names(x) <- make.unique(nm)
if (is.null(rows))
rows <- attr(xx, "row.names")[i]
attr(x, "row.names") <- rows
oldClass(x) <- oldClass(xx)
}
x
}
best("TX","heart attack")
source("best.R")
best("TX","heart attack")
best("TX","heart attack")
source("best.R")
best("TX","heart attack")
source("best.R")
best("TX","heart attack")
source("best.R")
best("TX","heart attack")
source("best.R")
best("TX","heart attack")
outha[,"heart attack"]
source("best.R")
outha[,"heart attack"]
best("TX","heart attack")
source("best.R")
best("TX","heart attack")
source("best.R")
best("TX","heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
source("best.R")
best("TX", "heart failure")
best("MD", "pneumonia")
best("BB", "heart attack")
head(outcome)
out <- outcome(,c(2,7,11))
out <- outcome[],c(2,7,11)]
out <- outcome[,c(2,7,11)]
names(out)
order.out[,3]
View(outcome)
View(outcome)
head(order(out[,3]))
head(order(out[,3],out[,1]))
head(out)
names(out) <- c("Hospital","State","Rate")
names(out)
out <- out[complete.cases(out),]
out[,3] <- as.numeric(out[,3])
out <- out[complete.cases(out),]
s <- sapply(out,grep,pattern="MD")
head(s$State)
req <- out[s,]
class(s$State)
req <- out[s$state,]
req
s <- sapply(out$State,grep,pattern="MD")
head(s)
s <- sapply(out,grep,pattern="MD")
s
s$State
req <- out[s$State,]
req
req <- req[order(out$Rate,out$Hospital),]
req
req <- out[s$State,]
head(req)
req <- req[order(req$Rate,req$Hospital),]
req
req[,1][[length(req)]]
req[,"Hospital"]
req[,c("Hospital",2)]
req[,c("Hospital","Rate")]
source("rankhospital.R")
rankhospital("MD","heart attack","Worst")
source("rankhospital.R")
rankhospital("MD","heart attack","Worst")
rankhospital("MD","heart attack",5)
source("rankhospital.R")
rankhospital("MD","heart attack",5)
source("rankhospital.R")
rankhospital("MD","heart attack",5)
source("rankhospital.R")
rankhospital("MD","heart attack",5)
source("rankhospital.R")
rankhospital("MD","heart attack",5)
source("rankhospital.R")
rankhospital("MD","heart attack",5)
source("rankhospital.R")
rankhospital("MD","heart attack",5)
source("rankhospital.R")
rankhospital("MD","heart attack",5)
source("rankhospital.R")
rankhospital("MD","heart attack",5)
rankhospital("MD","heart attack","worst")
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
source("rankhospital.R")
rankhospital("MN", "heart attack", 5000)
req[,1][[length(req)]]
tail(req[,1])
req[,1][[length(req$Hospital)]]
source("rankhospital.R")
rankhospital("MD", "heart attack", "worst")
head(out)
req <- group_by(out,out$State)
?grouped_df
??grouped_df
?dplyr
uniqu(out$State)
unique(out$State)
sort(unique(out$State))
head(out)
unique(head$state)
unique(out$state)
out$State
unique(out$State)
un <- sort(unique(out$State))
req <- out[order(out$Rate,out$Hospital),]
hos <- vector()
state <- vector()
for (i in un){
print(I)
}
for (i in un){
print(i)
}
for (i in un){}
for (i in un){
s <- sapply(df,grep,pattern=i)
a <- req[s$State,]
hos <- c(hos,a$hospital[[5]])
state <- c(state,a$State[[5]])
}
hos
for (i in un){
s <- sapply(req,grep,pattern=i)
a <- req[s$State,]
hos <- c(hos,a$hospital[[5]])
state <- c(state,a$State[[5]])
}
state
s <- sapply(req,grep,pattern"AK")
s <- sapply(req,grep,pattern="AK")
a <- req[s$State,]
a
for (i in un){
s <- sapply(req,grep,pattern=i)
a <- req[s$State,]
if (5 > length(a$Hospital)){
hos <- c(hos,NA)
state <- c(state,NA)
}
else {
hos <- c(hos,a$hospital[[5]])
state <- c(state,a$State[[5]])
}
}
x <- data.frame(hos,state)
?data.frame
hos
state
for (i in un){
s <- sapply(req,grep,pattern=i)
a <- req[s$State,]
if (5 > length(a$Hospital)){
hos <- c(hos,NA)
state <- c(state,i)
}
else {
hos <- c(hos,a$hospital[[5]])
state <- c(state,i)
}
}
hos
state
unique(state)
outha
names(outha)
un <- sort(unique(outha$state))
un
state <- vector()
hosp <- vector()
for (st in un){}
c("a",NA)
type(c("a",NA))
class(c("a",NA))
for (st in un){
s <-sapply(outha,grep,pattern=st)
a <- outha[s$state,]
if (5 > length(a$hospital)){
state <- c(state,st)
hosp <- c(hosp,NA)
}
else {
state <- c(state,st)
hosp <- a[,1][[5]]
}
}
hos
x <- c(NA,NA,NA)
cx
x
x <- c(x,"a")
x
library(devtools)
install.packages("devtools")
library(devtools)
install_github("dplyr")
install_github("tidyverse/dplyr")
install_github("tidyverse/dplyr")
